package cloud.autotests.tests;

import cloud.autotests.helpers.DriverUtils;
import com.codeborne.selenide.Condition;
import io.qameta.allure.Description;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import static com.codeborne.selenide.Selenide.*;
import static com.codeborne.selenide.WebDriverConditions.url;
import static io.qameta.allure.Allure.step;
import static org.assertj.core.api.Assertions.assertThat;


public class MainPageTests extends TestBase {

    @Test
    @DisplayName("Main page should contain track option")
    void trackOptionTest() {
        step("Open 'https://www.pochta.ru/'", () -> {
            open("https://www.pochta.ru/");
            $x("//input[@id='barcode']")
                    .shouldBe(Condition.visible)
                    .shouldHave(Condition.attribute("placeholder", "Введите трек-номер"));
        });
    }

    @ValueSource(strings = {"35005145009747", "CA123456789RU"})
    @ParameterizedTest
    @DisplayName("Track Option field should consume 14-digits track number")
    void trackOptionValidNumbersTest(String trackNumber) {
        step("Open 'https://www.pochta.ru/'", () -> {
            open("https://www.pochta.ru/");
            $x("//input[@id='barcode']")
                    .shouldBe(Condition.visible)
                    .setValue(trackNumber)
                    .pressEnter();
            webdriver().shouldHave(url("https://www.pochta.ru/tracking#" + trackNumber));
        });
    }

    @ValueSource(strings = {"3500514509747", "CA123456789RUT", "(5005145009747}"})
    @ParameterizedTest
    @DisplayName("Track Option field should consume 14-digits track number")
    void trackOptionInvalidNumbersTest(String trackNumber) {
        step("Open 'https://www.pochta.ru/'", () -> {
            open("https://www.pochta.ru/");
            $x("//input[@id='barcode']")
                    .shouldBe(Condition.visible)
                    .setValue(trackNumber)
                    .pressEnter();
            webdriver().shouldHave(url("https://www.pochta.ru/"));
        });
    }

    @Test
    void courierOptionTest() {
        open("https://www.pochta.ru/");
        $x("//*[@id='__next']//a[@href='/courier']")
                .shouldBe(Condition.visible)
                .click();
        webdriver().shouldHave(url("https://www.pochta.ru/courier"));
        $x("//div[@class='portlet-body']//h1")
                .shouldHave(Condition.text("Вызов курьера"));
    }

    @Test
    void boxesOptionTest() {
        open("https://www.pochta.ru/");
        $x("//a[@href='https://abox.pochta.ru/']")
                .shouldBe(Condition.visible)
                .click();
        webdriver().shouldHave(url("https://abox.pochta.ru/cabinet/#!home"));
        $x("//div[contains(@class, 'v-slot-abonCabinetLabel')]/div")
                .shouldHave(Condition.text("Аренда абонементной ячейки"));
    }

    @Test
    void boxesSearchTest() {
        open("https://abox.pochta.ru/cabinet/#!home");
        $x("//input[contains(@class, 'searchTextField ')]")
                .shouldBe(Condition.visible)
                .setValue("Казань")
                .pressEnter();
        //todo переделать в коллекцию
        $x("//div[contains(@class, 'v-label-postOfficeShortAddress')]")
                .shouldHave(Condition.text("Казань"));
    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page title should have header text")
    void titleTest() {
        step("Open url 'https://www.pochta.ru/'", () ->
                open("https://www.pochta.ru/"));

        step("Page title should have text 'Почта России'", () -> {
            String expectedTitle = "Почта России";
            String actualTitle = title();

            assertThat(actualTitle).isEqualTo(expectedTitle);
        });
    }

    @Test
    @Description("Autogenerated test")
    @DisplayName("Page console log should not have errors")
    void consoleShouldNotHaveErrorsTest() {
        step("Open url 'https://www.pochta.ru/'", () ->
                open("https://www.pochta.ru/"));

        step("Console logs should not contain text 'SEVERE'", () -> {
            String consoleLogs = DriverUtils.getConsoleLogs();
            String errorText = "SEVERE";

            assertThat(consoleLogs).doesNotContain(errorText);
        });
    }
}